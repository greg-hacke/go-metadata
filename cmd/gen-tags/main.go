package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"

	"greg-hacke/go-metadata/parser"
)

func main() {
	var outputDir string
	flag.StringVar(&outputDir, "o", "tags", "Output directory for generated Go files")
	flag.Parse()

	if flag.NArg() < 1 {
		fmt.Fprintf(os.Stderr, "Usage: %s [-o output_dir] <exiftool_pm_dir>\n", os.Args[0])
		fmt.Fprintf(os.Stderr, "\nExample:\n")
		fmt.Fprintf(os.Stderr, "  %s /opt/homebrew/Cellar/exiftool/13.25/libexec/lib/perl5/Image/ExifTool\n", os.Args[0])
		os.Exit(1)
	}

	pmDir := flag.Arg(0)

	// Verify the directory exists
	if _, err := os.Stat(pmDir); os.IsNotExist(err) {
		log.Fatalf("Error: directory %s does not exist", pmDir)
	}

	fmt.Printf("Parsing PM files from: %s\n", pmDir)
	fmt.Printf("Output directory: %s\n", outputDir)

	// Parse all PM files
	tables, err := parser.ParsePMFiles(pmDir)
	if err != nil {
		log.Fatalf("Error parsing PM files: %v", err)
	}

	fmt.Printf("Found %d tag tables\n", len(tables))

	// Create output directory
	absOutputDir, err := filepath.Abs(outputDir)
	if err != nil {
		log.Fatalf("Error resolving output directory: %v", err)
	}

	if err := os.MkdirAll(absOutputDir, 0755); err != nil {
		log.Fatalf("Error creating output directory: %v", err)
	}

	// Generate init.go file
	if err := generateInitFile(absOutputDir, tables); err != nil {
		log.Fatalf("Error generating init.go: %v", err)
	}

	// Generate Go files for each table
	successCount := 0
	for name, table := range tables {
		if err := parser.GenerateGoFile(table, absOutputDir); err != nil {
			fmt.Fprintf(os.Stderr, "Warning: failed to generate file for %s: %v\n", name, err)
			continue
		}
		successCount++
	}

	fmt.Printf("Successfully generated %d Go files in %s\n", successCount, absOutputDir)
}

// generateInitFile creates an init.go that registers all tag tables
func generateInitFile(outputDir string, tables map[string]*parser.TagTable) error {
	filename := filepath.Join(outputDir, "init.go")

	file, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer file.Close()

	fmt.Fprintf(file, "// Code generated by gen-tags. DO NOT EDIT.\n\n")
	fmt.Fprintf(file, "package tags\n\n")
	fmt.Fprintf(file, "func init() {\n")

	// Register each tag table
	for _, table := range tables {
		varName := table.Namespace + "Tags"
		fmt.Fprintf(file, "\tRegisterTagTable(%q, %s)\n", table.Namespace, varName)
	}

	fmt.Fprintf(file, "}\n")

	return nil
}
